Servlet:运行在服务端的Java小程序，是sun公司提供一套规范（接口），用来处理请求、响应
	servlet的实质就是java代码，通过java的API	动态的向客户端输出内容
	
Servlet规范：包含三个技术点
	1）servlet技术
	2）filter技术---过滤器
	3）listener技术---监听器

创建Servlet:
	原始方法(implement Servlet)
		1）创建类实现Servlet接口
		2）覆盖尚未实现的方法---service方法
		3）web.xml配置
		
	实际开发(extends HttpServlet)
		1）创建类继承HttpServlet类
		2）覆盖doGet和doPost
		3）web.xmlservlet配置

====================================================================================
Servlet生命周期(生命周期:何时创建?何时销毁?)
	1）Servlet何时创建
	默认第一次访问servlet时创建该对象(注意是默认 ,如果加上一个配置 <load-on-startup> servlet对象在服务器启动时就创建)
	
	2）Servlet何时销毁
	服务器关闭servlet就销毁
	
	3）每次访问必然执行的方法
	service(ServletRequest req, ServletResponse res)方法

====================================================================================
Servlet配置:
	其中url-pattern配置方式:
		完全匹配(/quickStartServlet)
		目录匹配(/aaa/bbb/ccc/*)
		扩展名匹配(*.abcd)
		缺省Servlet:<url-pattern>/</url-pattern> (当所有的servlet都不匹配访问资源地址时,缺省的servlet负责处理)
		
(web应用中所有的资源的响应都是servlet负责，包括静态资源)

欢迎页面(<welcome-file></welcome-file>)

====================================================================================
ServletContext对象
	web应用的全局（上下文）对象
	内部封装该web应用的信息
	一个web应用只有一个
	
ServletContext对象的生命周期？
	创建：该web应用被加载（服务器启动或发布web应用（前提，服务器启动状态））
	销毁：web应用被卸载（服务器关闭，移除该web应用）
	
获得ServletContext对象:
	1）ServletContext servletContext = config.getServletContext();
	2）ServletContext servletContext = this.getServletContext();
	由tomcat源代码,两种方法本质相同


====================================================================================
ServletContext的作用

	(1)获取web应用的全局初始化参数(getInitParameter方法)
		<context-param>
			<param-name>name</param-name>
			<param-value>value</param-value>
		</context-param>
		
	(2)获得web应用中任何资源的绝对路径
		注意相对路径的写法
		
	(3)ServletContext是一个域对象(作用范围:整个web应用)
		setAttribute/getAttribute/removeAttribute

